import nest_asyncio
#from distutils.cmd import Command
from importlib.metadata import requires
from math import perm
from optparse import Option
import os
import random
from sqlite3 import Timestamp
from typing import Any, Text
from unicodedata import name
from urllib import response
import discord, asyncio
from discord import channel
from discord import message
from discord import embeds
from discord import user
from discord import member
from datetime import timedelta
from discord import app_commands
from discord.ext import commands
from discord.ext.commands import MissingPermissions
from dotenv import load_dotenv
from datetime import datetime, timedelta
# from dotenv.main import with_warn_for_invalid_lines
import requests
from discord.utils import get
from discord.ext import commands
import aiohttp
from discord_together import DiscordTogether
import pytz
from typing import List
import wikipedia
from weather import Weather
from deep_translator import GoogleTranslator
from gtts import gTTS
import yt_dlp
from discord.ui import View, Button

#
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
#run
class aclient(discord.Client):
    def __init__(self):
        super().__init__(intents=discord.Intents.default())
        self.synced = False
    
    async def on_ready(self):
        await self.wait_until_ready()
        if not self.synced:
            await tree.sync()
            self.synced = True
        print(f"{client.user.name} ƒë√£ k·∫øt n·ªëi t·ªõi Discord")
        client.togetherControl = await DiscordTogether(TOKEN)

        activity = discord.Game(name='/ai-chat ƒë·ªÉ ƒë·∫∑t c√¢u h·ªèi v·ªõi AI', type=3)
        await client.change_presence(status=discord.Status.online, activity=activity)


client = aclient()
tree = app_commands.CommandTree(client)



#commands list


@tree.command(name="help", description = "Xem t·∫•t c·∫£ c√°c l·ªánh c·ªßa bot")
async def self(interaction: discord.Interaction):
    myembed = discord.Embed (title = 'Peanutss Bot (v4.2.0)', description = 'S·ª≠ d·ª•ng `/[l·ªánh]` ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi bot', color = discord.Color.gold())
    myembed.set_author (name = "Danh S√°ch L·ªánh")
    myembed.add_field (name = "üí¨ T∆∞∆°ng T√°c - (5)", value = "</s·ªë-may-m·∫Øn:1014044426898784275>, </m√°y-t√≠nh-b·ªè-t√∫i:1137034655112106046>, </m√°y-t√≠nh-tu·ªïi-th√¥ng-minh:1013757293248122971>, </vƒÉn-m·∫´u:1014047478808576021>, </h√†nh-ƒë·ªông:1014047478808576020>", inline=False)
    myembed.add_field (name = "ü§ñ Tr√≠ Tu·ªá Nh√¢n T·∫°o (AI) - (2)", value = "`/ai-chat` `/imagine`", inline=False)
    myembed.add_field (name = "üéµ √Çm Nh·∫°c - (7)", value = "`/play`, `/skip` ,`/pause`, `/resume`, `/queue`, `/join`, `/leave`", inline=False)
    myembed.add_field (name = "üéÆ Mini Game - (2)", value = "`/x√¨-d√°ch`, `/k√©o-b√∫a-bao`", inline=False)
    myembed.add_field (name = "üéÅ Media - (7)", value = "</meme:1014044426898784273>, </darkmeme:1014044426898784274>, </girl:1014044427255287884>, </cat:1014044427255287878>, </dog:1014044427255287879>, </food:1014044427255287880>, </waifu:1014044427255287882>", inline=False)
    myembed.add_field (name = "üì∫ Gi·∫£i Tr√≠ - (6)", value = "</youtube:1014044427255287885>, </c·ªù-vua:1025980386439856229>, </uno:1139271595504963595>, </gartic-phone:1139271595504963594>, </putt-party:1139271595504963596>, </poker-night:1025980386439856230>", inline=False)
    myembed.add_field (name = "üîû NSFW - (1)", value = "</hentai:1014044427255287883>", inline=False)
    myembed.add_field (name = "ü™ô Ti·ªÅn T·ªá - (1)", value = "</binance:1014044427372744773>", inline=False)
    myembed.add_field (name = "‚ö†Ô∏è Qu·∫£n L√≠ Server- (4)", value = "`/kick` `/ban` `/unban` `/clear`", inline=False)
    myembed.add_field (name = "üí° T√≠nh NƒÉng B·ªï Tr·ª£ - (9)", value = "`/speak` </t√¨m-t√™n-b√†i-h√°t:1136561727945842729>, </r√∫t-g·ªçn-link:1136680617967362118>, </t·∫°o-qr-code:1136665819800150026>, </d·ªãch:1014044427255287887>, </lyrics:1136404460306956439>, </s·∫Øp-t·∫øt:1014044427255287886>, </th·ªùi-ti·∫øt:1025427457559502868>, </chat-with-another-language:1027239217073487923>", inline=False)
    myembed.add_field (name = "‚öôÔ∏è Guilds - (6)", value = "</t√≠nh-nƒÉng-m·ªõi:1136902132457541703>, </help:1014044426898784271>, </ping:1014044427372744766>, </server-status:1014044427372744771>, </server-avatar:1014044427372744772>, </avatar:1025964029438607421>", inline=False)
    myembed.add_field (name = "‚òéÔ∏è Contact - (3):", value = "</contact:1014044427372744765>, </donate:1014044427372744767>, </invite:1014044427372744770>", inline=False)
    myembed.set_footer(text="‚Ä¢ Big Update: Th√™m L·ªánh 'AI-Chat' gi√∫p tra c·ª©u th√¥ng tin m·ªôt c√°ch ch√≠nh x√°c h∆°n!")
    await interaction.response.send_message(embed = myembed, ephemeral = False)
    

#
@tree.command(name="m√°y-t√≠nh-tu·ªïi-th√¥ng-minh", description = "D√πng ƒë·ªÉ t√≠nh to√°n tu·ªïi c·ªßa b·∫°n")
async def self(interaction: discord.Interaction, nhap_tuoi: str):
    await interaction.response.send_message(f"B·∫°n ƒë√£ {nhap_tuoi} tu·ªïi r·ªìi", ephemeral = False)

#

@tree.command(name="m√°y-t√≠nh-chi·ªÅu-cao", description = "D√πng ƒë·ªÉ t√≠nh to√°n chi·ªÅu cao c·ªßa b·∫°n (nh·∫≠p s·ªë centimet)")
async def self(interaction: discord.Interaction, nhap_chieu_cao: int):
    await interaction.response.send_message(f"B·∫°n cao {nhap_chieu_cao}cm ", ephemeral = False)
    
    
######
@tree.command(name="meme", description = "G·ª≠i cho b·∫°n m·ªôt meme")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://www.reddit.com/r/memes.json") as r:
            memes = await r.json()
            memeembed = discord.Embed(color = discord.Color.green())
            memeembed.set_image(url=memes["data"]["children"][random.randint(0, 25)]["data"]["url"])
            memeembed.set_footer(text=f"Meme c·ªßa m·ªçi nh√†")
    await interaction.response.send_message(embed = memeembed, ephemeral = False)
    rand_func()
    await interaction.response.send_message(embed = memeembed, ephemeral = False)
######
@tree.command(name="darkmeme", description = "G·ª≠i cho b·∫°n m·ªôt darkmeme")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://www.reddit.com/r/dankmemes/new.json?sort=hot") as r:
            darkmemes = await r.json()
            darkembed = discord.Embed(color = discord.Color.red())
            darkembed.set_image(url=darkmemes["data"]["children"][random.randint(0, 25)]["data"]["url"])
            darkembed.set_footer(text=f"ƒê·∫£k M√™m")
    await interaction.response.send_message(embed = darkembed, ephemeral = False)

######
@tree.command(name="s·ªë-may-m·∫Øn", description = "Cho b·∫°n m·ªôt con s·ªë may m·∫Øn trong ng√†y")
async def self(interaction: discord.Interaction):
    lknum = random.randint(1,99)
    peabot_rep = 'Con s·ªë may m·∫Øn h√¥m nay c·ªßa b·∫°n l√†: ' + str(lknum) + ' ü•≥' 

    await interaction.response.send_message(f'{peabot_rep}\n Nh·ªõ c·∫ßm l·∫•y n√≥ ƒëi ƒë√°nh ƒë·ªÅ nh√© XD ^^')

######
@tree.command(name="cat", description = "G·ª≠i cho b·∫°n m·ªôt t·∫•m h√¨nh m√®o")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
    #api ƒëu·ªìi b·∫ßu g·∫Øn url trong 1 list, ph·∫£i t√°ch b·∫±ng 1 int ch·ª© kh√¥ng th·ªÉ t√°ch nh∆∞ th∆∞·ªùng
        async with cs.get("https://api.thecatapi.com/v1/images/search") as r:
            cats = await r.json()

            catch = cats[0] #tr·∫£ v·ªÅ d√£y nh∆∞ api th∆∞·ªùng (m·∫•t [])
            catlink = catch['url'] #t√°ch data nh∆∞ th∆∞·ªùng

            catembed = discord.Embed(color = discord.Color.blue())
            catembed.set_image(url=catlink)
            catembed.set_footer(text=f"M√®o m√©o meo m√®o meo")
        
    await interaction.response.send_message(embed = catembed, ephemeral = False)


######
@tree.command(name="dog", description = "G·ª≠i cho b·∫°n m·ªôt b·ª©c h√¨nh ch√≥")
async def self(interaction: discord.Interaction):
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://dog.ceo/api/breeds/image/random") as r:
            dogs = await r.json()
            dogsembed = discord.Embed(color = discord.Color.gold())
            dogsembed.set_image(url=dogs["message"])
            dogsembed.set_footer(text=f"Cute Dogs :3")
    await interaction.response.send_message(embed = dogsembed, ephemeral = False)


######
@tree.command(name="food", description = "G·ª≠i cho b·∫°n m·ªôt b·ª©c h√¨nh to√†n l√† ƒë·ªì ƒÉn")
async def self(interaction: discord.Interaction):       
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://www.reddit.com/r/food/new.json?sort=hot") as r:
            foods = await r.json()
            foodsembed = discord.Embed(color = discord.Color.green())
            foodsembed.set_image(url=foods["data"]["children"][random.randint(0, 25)]["data"]["url"])
            foodsembed.set_footer(text=f'Mlem mlem')
    await interaction.response.send_message(embed = foodsembed, ephemeral = False)

######
@tree.command(name="waifu", description = "G·ª≠i cho b·∫°n m·ªôt b·ª©c h√¨nh waifu")
async def self(interaction: discord.Interaction):       
    async with aiohttp.ClientSession() as cs:
        async with cs.get("https://api.waifu.pics/sfw/waifu") as r:
            waifu = await r.json()
            waifuembed = discord.Embed(color = discord.Color.dark_orange())
            waifuembed.set_image(url=waifu["url"])
            waifuembed.set_footer(text=f"Who is your waifu? ‚ù§Ô∏è")
    await interaction.response.send_message(embed = waifuembed, ephemeral = False)


######
@tree.command(name="hentai", description = "L·ªánh ch·ªâ ƒë∆∞·ª£c d√πng trong ph√≤ng c√≥ tag NSFW 'waifu', 'neko', 'blowjob'", nsfw = 'true')
async def hentai(interaction: discord.Interaction, style: str):
        link = "https://api.waifu.pics/nsfw/"
        fullurl = link + style
        async with aiohttp.ClientSession() as cs:
            async with cs.get(fullurl) as r:
                nsfw = await r.json()
                nsfwembed = discord.Embed(color = discord.Color.dark_red())
                nsfwembed.set_image(url=nsfw["url"])
                nsfwembed.set_footer(text=f"‚ö†Ô∏è| Not Safe For Work!!")
                await interaction.response.send_message(embed = nsfwembed, ephemeral = False)


@hentai.autocomplete('style')
async def hentai_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    style = ['waifu','neko','blowjob']
    return [
        app_commands.Choice(name=stl, value=stl)
        for stl in style if current.lower() in stl.lower()
        ]

#######
@tree.command(name="girl", description = "G·ª≠i cho b·∫°n nh·ªØng b·ª©c h√¨nh thattuoimat‚ù§Ô∏è")
async def self(interaction: discord.Interaction):

    lines = open('list_girl.txt').read().splitlines()
    link = random.choice(lines)
   
    girlembed = discord.Embed(color = discord.Color.from_rgb(255,105,180))
    girlembed.set_image(url=link)
    girlembed.set_footer(text=f"M·ªói b·ª©c ·∫£nh, m·ªôt ni·ªÅm vui ‚ù§Ô∏è")
    await interaction.response.send_message(embed = girlembed, ephemeral = False)


@tree.command(name="youtube", description = "Xem Youtube tr·ª±c ti·∫øp tr√™n Discord")
async def youtube(interaction: discord.Interaction): 
    try:
        voice_id = interaction.user.voice.channel.id
        link = await client.togetherControl.create_link(voice_id, 'youtube')
        await interaction.response.send_message(f'Nh·∫•n v√†o link ƒë·ªÉ xem Youtube: {link}', ephemeral = False)
    except:
        await interaction.response.send_message('‚ùå| B·∫°n ph·∫£i v√†o k√™nh voice tr∆∞·ªõc!!', ephemeral = False)

###
@tree.command(name="chess", description = "Ch∆°i c·ªù vua tr·ª±c ti·∫øp tr√™n Discord")
async def youtube(interaction: discord.Interaction): 
    try:
        voice_id = interaction.user.voice.channel.id
        link = await client.togetherControl.create_link(voice_id, 'chess')
        await interaction.response.send_message(f'Nh·∫•n v√†o link ƒë·ªÉ tham gia tr√≤ ch∆°i: {link}', ephemeral = False)
    except:
        await interaction.response.send_message('‚ùå| B·∫°n ph·∫£i v√†o k√™nh voice tr∆∞·ªõc!!', ephemeral = False)

###
@tree.command(name="poker-night", description = "Ch∆°i b√†i poker tr·ª±c ti·∫øp tr√™n Discord")
async def youtube(interaction: discord.Interaction): 
    try:
        voice_id = interaction.user.voice.channel.id
        link = await client.togetherControl.create_link(voice_id, 'poker')
        await interaction.response.send_message(f'Nh·∫•n v√†o link ƒë·ªÉ tham gia tr√≤ ch∆°i: {link}', ephemeral = False)
    except:
        await interaction.response.send_message('‚ùå| B·∫°n ph·∫£i v√†o k√™nh voice tr∆∞·ªõc!!', ephemeral = False)


@tree.command(name="s·∫Øp-t·∫øt", description = "ƒê·∫øm ng∆∞·ª£c ng√†y ƒë·∫øn T·∫øt Nguy√™n ƒê√°n")
async def self(interaction: discord.Interaction):   
    #set up ngay den tet
    ngay_tet = datetime.strptime('Feb 17 2025 00:00', '%b %d %Y %H:%M') 
    hom_nay = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')) #set timezone v·ªÅ VN
    count = int((ngay_tet - hom_nay.replace(tzinfo=None)).total_seconds())

    #dem ngay gio
    ngay = count//86400
    gio = (count-ngay*86400)//3600
    phut = (count-ngay*86400-gio*3600)//60
    giay = count-ngay*86400-gio*3600-phut*60
    await interaction.response.send_message(f"Ch·ªâ c√≤n **{ngay}** ng√†y **{gio}** gi·ªù **{phut}** ph√∫t **{giay}** gi√¢y n·ªØa l√† ƒë·∫øn t·∫øt 2023 r·ªìi!!!!", ephemeral = False) 

##########
@tree.command(name = "d·ªãch", description = "D·ªãch b·∫•t c·ª© ng√¥n ng·ªØ n√†o tr√™n th·∫ø gi·ªõi: en, ja, vi,...")
async def translate(interaction: discord.Interaction, input_lang: str, output_lang: str, noidung: str):
    #khai bao language
    if input_lang == "Ti·∫øng Vi·ªát":
        in_lang = 'vi'
    if input_lang == "Ti·∫øng Anh":
        in_lang = 'en'
    if input_lang == "Ti·∫øng Nh·∫≠t":
        in_lang = 'ja'
    if input_lang == "Ti·∫øng Trung (Ph·ªìn Th·ªÉ)":
        in_lang = 'zh-TW'
    if input_lang == "Ti·∫øng Trung (Gi·∫£n Th·ªÉ)":
        in_lang = 'zh-CN'
    if input_lang == "Ti·∫øng Indo":
        in_lang = 'id'
    if input_lang == "Ti·∫øng H√†n":
        in_lang = 'ko'
    if input_lang == "Ti·∫øng Th√°i":
        in_lang = 'th'
    if input_lang == "Ti·∫øng ƒê·ª©c":
        in_lang = 'de'
    if input_lang == "Ti·∫øng Ph√°p":
        in_lang = 'fr'
    if input_lang == "Ti·∫øng Nga":
        in_lang = 'ru'
    if input_lang == "Ti·∫øng T√¢y Ban Nha":
        in_lang = 'es'
    if input_lang == "Ti·∫øng √ù":
        in_lang = 'it'

#output lang
    if output_lang == "Ti·∫øng Vi·ªát":
        out_lang = 'vi'
    if output_lang == "Ti·∫øng Anh":
        out_lang = 'en'
    if output_lang == "Ti·∫øng Nh·∫≠t":
        out_lang = 'ja'
    if output_lang == "Ti·∫øng Trung (Ph·ªìn Th·ªÉ)":
        out_lang = 'zh-TW'
    if output_lang == "Ti·∫øng Trung (Gi·∫£n Th·ªÉ)":
        out_lang = 'zh-CN'
    if output_lang == "Ti·∫øng Indo":
        out_lang = 'id'
    if output_lang == "Ti·∫øng H√†n":
        out_lang = 'ko'
    if output_lang == "Ti·∫øng Th√°i":
        out_lang = 'th'
    if output_lang == "Ti·∫øng ƒê·ª©c":
        output_lang = 'de'
    if output_lang == "Ti·∫øng Ph√°p":
        out_lang = 'fr'
    if output_lang == "Ti·∫øng Nga":
        out_lang = 'ru'
    if output_lang == "Ti·∫øng T√¢y Ban Nha":
        out_lang = 'es'
    if output_lang == "Ti·∫øng √ù":
        out_lang = 'it'

    result = GoogleTranslator(source=f'{in_lang}', target=f'{out_lang}').translate(text=noidung)
   

    dich_embed = discord.Embed (title = f'K·∫øt qu·∫£ d·ªãch t·ª´ {input_lang} sang {output_lang}:', color = discord.Color.green())
    dich_embed.add_field (name = 'VƒÉn B·∫£n G·ªëc:', value = noidung, inline = False)
    dich_embed.add_field (name = 'VƒÉn B·∫£n Sau Khi D·ªãch: ', value = result, inline = False)
    dich_embed.set_footer (text = f'L·ªánh ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi: {interaction.user}')
    await interaction.response.send_message(embed = dich_embed, ephemeral = False)

@translate.autocomplete('input_lang')
async def translate_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    input_lang = ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh', 'Ti·∫øng Nh·∫≠t', 'Ti·∫øng Trung (Ph·ªìn Th·ªÉ)','Ti·∫øng Trung (Gi·∫£n Th·ªÉ)', 'Ti·∫øng Indo', 'Ti·∫øng H√†n', 'Ti·∫øng Th√°i', 'Ti·∫øng ƒê·ª©c', 'Ti·∫øng Ph√°p', 'Ti·∫øng Nga', 'Ti·∫øng T√¢y Ban Nha', 'Ti·∫øng √ù']
    return [
        app_commands.Choice(name=lang, value=lang)
        for lang in input_lang if current.lower() in lang.lower()
        ]

@translate.autocomplete('output_lang')
async def translate_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    output_lang = ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh', 'Ti·∫øng Nh·∫≠t', 'Ti·∫øng Trung (Ph·ªìn Th·ªÉ)','Ti·∫øng Trung (Gi·∫£n Th·ªÉ)', 'Ti·∫øng Indo', 'Ti·∫øng H√†n', 'Ti·∫øng Th√°i', 'Ti·∫øng ƒê·ª©c', 'Ti·∫øng Ph√°p', 'Ti·∫øng Nga', 'Ti·∫øng T√¢y Ban Nha', 'Ti·∫øng √ù']
    return [
        app_commands.Choice(name=lang, value=lang)
        for lang in output_lang if current.lower() in lang.lower()
    ]
##########

#
@tree.command(name="contact", description = "Th√¥ng tin li√™n h·ªá v·ªõi Developer")
async def self(interaction: discord.Interaction):   
    contactembed = discord.Embed (color = discord.Color.dark_grey())
    contactembed.set_author (name = "Li√™n h·ªá v·ªõi Dev t·∫°i:")
    contactembed.add_field (name = "Discord Account ^^:", value = 'Peanuts Is Me (Andy)#2757', inline=False)
    contactembed.add_field (name = "Link Facebook ^^:", value = 'https://facebook.com/yt.andymusic', inline=False)
    contactembed.add_field (name = "Website ^^:", value = 'https://peanutssbot.tk', inline=False)
    contactembed.add_field (name = "Link Youtube ^^:", value = 'https://youtube.com/c/andymusicc', inline=False)
    contactembed.add_field (name = "Github:", value = 'https://github.com/anphongdoa5', inline=False)
    await interaction.response.send_message(embed = contactembed, ephemeral = False)

#
@tree.command(name="ping", description = "Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot")
async def self(interaction: discord.Interaction):
    await interaction.response.send_message(f'Pong! ƒê·ªô tr·ªÖ c·ªßa t·ªõ l√† {round(client.latency * 1000)}ms')

#
@tree.command(name="donate", description = "·ª¶ng h·ªô Developer m·ªôt v√†i ly cafe")
async def self(interaction: discord.Interaction):
    donateembed = discord.Embed (title = 'C√°c ph∆∞∆°ng th·ª©c ·ªßng h·ªô:', color = discord.Color.orange())
    donateembed.set_thumbnail(url='https://cdn.discordapp.com/attachments/854951941472911361/1119843698390347836/IMG_3315.png')
    donateembed.set_author (name = "Donate ·ªßng h·ªô Dev ly c√† ph√™ t·∫°i ƒë√¢y (qu√©t m√£ QR b√™n c·∫°nh ho·∫∑c link b√™n d∆∞·ªõi):")
    donateembed.add_field (name = "Playerduo:", value = 'https://playerduo.net/peanutss', inline=False)
    donateembed.add_field (name = "Paypal: `@andyhnh`", value = 'https://www.paypal.me/andyhnh', inline=False)
    donateembed.set_footer(text="C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu <3 / Luv u guys so much <3")
    await interaction.response.send_message(embed = donateembed, ephemeral = False)

#
@tree.command(name="covid19vn", description = "Xem t√¨nh h√¨nh, di·ªÖn bi·∫øn d·ªãch COVID-19 t·∫°i Vi·ªát Nam")
async def self(interaction: discord.Interaction):
    response = requests.get('http://coronavirus-19-api.herokuapp.com/countries/vietnam')
    data = response.json()
    cases = data['cases']
    deaths = data['deaths']
    recovered = data['recovered']
    peabot_rep = f"T√åNH H√åNH COVID 19 T·∫†I VI·ªÜT NAM:\n‚ò£  S·ªë Ng∆∞·ªùi Nhi·ªÖm: {cases} ng∆∞·ªùi\nüíÄ  S·ªë Ng∆∞·ªùi T·ª≠ Vong: {deaths} ng∆∞·ªùi\n‚úÖ  S·ªë Ng∆∞·ªùi B√¨nh Ph·ª•c: {recovered} ng∆∞·ªùi"
    await interaction.response.send_message(peabot_rep, ephemeral = False)

#
@tree.command(name="covid19", description = "Xem t√¨nh h√¨nh, di·ªÖn bi·∫øn d·ªãch COVID-19 tr√™n to√†n th·∫ø gi·ªõi")
async def self(interaction: discord.Interaction):
    response = requests.get('http://coronavirus-19-api.herokuapp.com/countries/world')
    data = response.json()
    cases = data['cases']
    deaths = data['deaths']
    recovered = data['recovered']
    peabot_rep = f"T√åNH H√åNH COVID 19 TR√äN TH·∫æ GI·ªöI:\n‚ò£  S·ªë Ng∆∞·ªùi Nhi·ªÖm: {cases} ng∆∞·ªùi\nüíÄ  S·ªë Ng∆∞·ªùi T·ª≠ Vong: {deaths} ng∆∞·ªùi\n‚úÖ  S·ªë Ng∆∞·ªùi B√¨nh Ph·ª•c: {recovered} ng∆∞·ªùi"
    await interaction.response.send_message(peabot_rep, ephemeral = False)

#
@tree.command(name="invite", description = "L·∫•y link m·ªùi bot v√†o server")
async def self(interaction: discord.Interaction):
    inviteembed = discord.Embed (color = discord.Color.green())
    inviteembed.set_author (name = "Link Invite Peanutss Bot")
    inviteembed.add_field (name = "Link:", value = 'https://discord.com/oauth2/authorize?client_id=728462830407254088&permissions=34631477334&scope=bot', inline=False)
    await interaction.response.send_message(embed = inviteembed, ephemeral = False)

#
@tree.command(name="server-status", description = "Ki·ªÉm tra th√¥ng tin c·ªßa server")
async def self(interaction: discord.Interaction):
    statembed = discord.Embed(title=f'Th√¥ng tin server {interaction.guild.name} ',description= '', color = discord.Color.from_rgb(147,112,219))
    statembed.set_thumbnail(url=f'{interaction.guild.icon}')

    statembed.add_field(name='T√™n Server:', value=f'{interaction.guild.name}', inline=True)
    statembed.add_field(name='S·ªë L∆∞·ª£ng Th√†nh Vi√™n:', value=f'{interaction.guild.member_count} th√†nh vi√™n', inline=True)
    statembed.add_field(name='Ch·ªß Server:', value=f'<@{interaction.guild.owner_id}>', inline=True)
    statembed.add_field(name='Server T·∫°o L√∫c:', value=f'{interaction.guild.created_at.strftime("%#d %B %Y, %H:%M")}')

    statembed.add_field(name='Tr·∫°ng Th√°i Bot:', value='üü¢ Online!!', inline = True)
    statembed.add_field(name='Latency:', value=f'ƒê·ªô tr·ªÖ bot: {round(client.latency * 1000)}ms', inline=True)
    statembed.set_footer(text=f'B·ªüi: {interaction.user}!')

    await interaction.response.send_message(embed = statembed, ephemeral = False)

#
@tree.command(name="server-avatar", description = "Xem ·∫£nh ƒë·∫°i di·ªán c·ªßa server")
async def self(interaction: discord.Interaction):
    avaembed = discord.Embed(title=f'Avatar c·ªßa server {interaction.guild.name}', description='', color = discord.Color.from_rgb(0,201,87))
    avaembed.set_image(url=f'{interaction.guild.icon}')
    avaembed.set_footer(text=f'B·ªüi: {interaction.user}!')
    await interaction.response.send_message(embed = avaembed, ephemeral = False)

#
@tree.command(name = "binance", description = "Ki·ªÉm tra gi√° tr·ªã c√°c ƒë·ªìng ti·ªÅn ·∫£o")
async def binance(interaction: discord.Interaction, coin_name: str):

    if coin_name == "Bitcoin (BTC)":
        coin_position = 0
    if coin_name == "Ethereum (ETH)":
        coin_position = 1
    if  coin_name == "Doge Coin (DOGE)":
        coin_position = 9
    if coin_name == "Shiba Inu (SHIB)":
        coin_position = 11
    if coin_name == "Ethereum Classic (ETC)":
        coin_position = 19
    
    coin_api = requests.get('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd')
    tach_json_coin = coin_api.json()
    coin_data = tach_json_coin[coin_position] 
    coin_price = coin_data["current_price"]

    await interaction.response.send_message(f'T·ªâ gi√° ƒë·ªìng **{coin_name}** hi·ªán t·∫°i l√†: **{coin_price} USD/1 {coin_name}**', ephemeral = False)
  
@binance.autocomplete('coin_name')
async def binance_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    coin_name = ['Bitcoin (BTC)', 'Ethereum (ETH)', 'Doge Coin (DOGE)', 'Shiba Inu (SHIB)', 'Ethereum Classic (ETC)']
    return [
        app_commands.Choice(name=binan, value=binan)
        for binan in coin_name if current.lower() in binan.lower()
    ]



#
@tree.command(name = "h√†nh-ƒë·ªông", description = "...")
async def action_module(interaction: discord.Interaction, hanh_dong: str, tin_nhan: str):
    async with aiohttp.ClientSession() as cs:
        async with cs.get(f"https://api.waifu.pics/sfw/{hanh_dong}") as r:
            action = await r.json()
            actionembed = discord.Embed(color = discord.Color.from_rgb(127,255,212))
            actionembed.set_image(url=action["url"])
            actionembed.set_footer(text=f"{tin_nhan} ...‚ù§Ô∏è")
            await interaction.response.send_message(embed = actionembed, ephemeral = False)

@action_module.autocomplete('hanh_dong')
async def action_module_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    hanh_dong = ['kiss', 'hug', 'cry', 'smile', 'highfive', 'kill', 'pat', 'smug', 'bonk', 'lick', 'awoo', 'blush', 'wave', 'slap']
    return [
        app_commands.Choice(name=act, value=act)
        for act in hanh_dong if current.lower() in act.lower()
    ]

@tree.command(name = "vƒÉn-m·∫´u", description = "T·∫°o ra nh·ªØng b√†i vƒÉn m·∫´u c√≥ gi√° tr·ªã theo th·ªùi gian")
async def action_module(interaction: discord.Interaction):
    peabot_rep = [
        'B·∫Øn CSGO c≈©ng gi·ªëng nh∆∞ ƒëi t·ª´ thi·ªán v·∫≠y, c√°i t√¢m ph·∫£i ƒë·∫∑t l√™n ƒë·∫ßu',
        'ƒê·∫∑t c√¢u h·ªèi l√† t·ªët nh∆∞ng c√°i g√¨ c≈©ng h·ªèi th√¨ kh√¥ng',
        'Sau n√†y, ch·ªâ c√≥ l√†m th√¨ m·ªõi c√≥ ƒÉn. Nh·ªØng c√°i lo·∫°i kh√¥ng l√†m m√† ƒë√≤i c√≥ ƒÉn th√¨ ch·ªâ c√≥ ƒÉn ||ƒë·∫ßu bu·ªìi|| ƒÉn ||c·ª©t||',
        'Nh·ªØng c√°i lo·∫°i ng·ªß qu√° gi·ªù tr∆∞a th√¨ kh√¥ng gi√†u ƒë∆∞·ª£c ƒë√¢u',
        'Nam t·ª≠ h√°n ƒë·∫°i tr∆∞·ª£ng phu, ƒë√°nh nhau kh√¥ng l·∫°i ||b√∫ cu|| gi·∫£ng h√≤a',
        'T√¥i c√≥ th·∫±ng em sinh nƒÉm 96 h·ªçc B√°ch Khoa C∆° Kh√≠ tay ngang sang h·ªçc IT...',
        'H·∫£o h√°nnnn',    
        'Bao l√¢u th√¨ b√°n ƒë∆∞·ª£c 1 t·ªâ g√≥i m√®? Tr·∫£ l·ªùi?',
        'H·ªçc ƒë·∫øm: 1 - Ng√¥ Di·ªác Ph√†m - 3 - 4 - 5 - 6 - 7...',
        'B·∫°n kh√¥ng c√≥ m·ªôt ch√∫t vƒÉn ho√° n√†o, b·∫°n kh√¥ng c√≥ m·ªôt ch√∫t ƒë·∫°o ƒë·ª©c n√†o. T·∫°i sao b·∫°n l·∫°i d√πng l·ªánh n√†y?? B·∫°n kh√¥ng ƒë·ªß t∆∞ c√°ch ƒë·ªÉ n√≥i chuy·ªán v·ªõi t√¥i',
        'Xin l√† xin vƒ©nh bi·ªát c·ª•',
        'Th·∫ø b·∫°n n√≥i xem v√¨ sao m√¨nh ph·∫£i tr·∫£ l·ªùi b·∫°n - Peanutss Chen',
        'ChaÃÄo em, chiÃ£ laÃÄ luaÃ£ÃÇt suÃõ cuÃâa army vaÃÄ ƒëaÃÉ thu thaÃ£ÃÇp ƒëuÃâ baÃÜÃÄng chuÃõÃÅng em xuÃÅc phaÃ£m army cuÃâa coÃÇng ty beÃÇn chiÃ£. Em vui loÃÄng xoÃÅa baÃÄi naÃÄy sau 30 phuÃÅt. NeÃÇÃÅu sau 30 phuÃÅt maÃÄ em vaÃÇÃÉn chuÃõa xoÃÅa baÃÄi thiÃÄ beÃÇn chiÃ£ seÃÉ duÃÄng toÃõÃÅi phaÃÅp luaÃ£ÃÇt vaÃÄ em seÃÉ biÃ£ loÃÇi ƒëaÃÇÃÄu ra CoÃÇn ƒêaÃâo !',
        'C√ÅC B·∫†N NH√ÇN VI√äN ∆†I, C√ÅC B·∫†N H·ªñ TR·ª¢ M√åNH V·ªöI. C√ÅC B·∫†N ∆†I C√ÅC B·∫†N ƒê∆ØA NH·∫¶M ƒê·ªí CHO M√åNH C√ÅC B·∫†N ∆†I. C√ÅC B·∫†N NH√ÇN VI√äN H·ªñ TR·ª¢ ∆†I. C√ÅC B·∫†N H·ªñ TR·ª¢ M√åNH KH√îNG C√ÅC B·∫†N ∆†I. C√ÅC B·∫†N ƒêI·∫æC √Ä C√ÅC B·∫†N ∆†I H·ªñ TR·ª¢ M√åNH KH√îNG C√ÅC B·∫†N ∆†I.',
        'Trong tr∆∞·ªùng h·ª£p anh b·ªã say ƒë·∫Øm b·ªüi v·∫ª ƒë·∫πp quy·∫øn r≈© c·ªßa em (ho·∫∑c nh·ªØng v·∫ª ƒë·∫πp t∆∞∆°ng t·ª± c·ªßa em), anh kh·∫≥ng ƒë·ªãnh anh kh√¥ng li√™n h·ªá b·ªüi b·∫•t c·ª© m·ªôt c√¥ g√°i kh√°c n√†o trong nh√≥m n√†y, c√≥ l·∫Ω tr√°i tim c·ªßa anh ch·ªâ d√†nh cho em. Anh c≈©ng xin kh·∫≥ng ƒë·ªãnh anh kh√¥ng h·ªÅ c√≥ th·ªÉ y√™u m·ªôt c√¥ g√°i n√†o kh√°c khi ƒë√£ y√™u em..',
        '√îi b·∫°n ∆°i! B·∫°n s·ª©c ƒë·ªÅ kh√°ng k√©m l√† do b·∫°n kh√¥ng ch∆°i ƒë·ªì ƒë·∫•y b·∫°n ·∫°, n·∫øu b·∫°n ch∆°i ƒë·ªì v√†o th√¨ l√† ƒë·ªÅ kh√°ng n√≥ kh·ªèe n√≥ kh√¥ng bao gi·ªù b·ªã ·ªëm ƒë√¢u b·∫°n ·∫°, ch∆°i ƒë·ªì l√† thu·ªëc b·ªï m√† b·∫°n! B·∫°n ph·∫£i n√™n nh·ªõ nh√°, c√°i vi√™n thu·ªëc b√¨nh th∆∞·ªùng, c√°i vi·∫øt thu·ªëc ACID B1 b·∫°n mua c√≥ 2 ngh√¨n ƒëc m·∫•y vi√™n ƒë√∫ng k ? Ho·∫∑c l√† 10 ngh√¨n 1 vi√™n, 10 ngh√¨n 1 vi√™n l√† ACID B1 ƒë·∫•y , ƒë√∫ng kh√¥ng? Th·∫ø ƒë√¢y nh·ªØng vi√™n thu·ªëc nh∆∞ vi√™n thu·ªëc k·∫πo, vi√™n thu·ªëc kim c∆∞∆°ng, vi√™n thu·ªëc v∆∞∆°ng li·ªám n√†y, vi√™n thu·ªëc c√°c ki·ªÉu l√†y th√¨ b·∫°n mua c√°i ƒë·∫•y v√†o 500 ngh√¨n 1 vi√™n c∆° m√†! Ch∆°i c√°i ƒë·∫•y v√†o ƒë·ªÅ kh√°ng n√≥ ph·∫£i cao h∆°n ch·ª© b·∫°n! Ch∆°i c√°i ƒë·∫•y v√†o nhi·ªÅu ƒë·ªÅ kh√°ng m√†! B·∫°n kh√¥ng ch∆°i v√†o ƒë·ªÅ kh√°ng b·∫°n k√©m l√† ph·∫£i ƒë·∫•y b·∫°n ·∫° !',
        'Theo m√¨nh th√¨ kh√¥ng n√™n ƒëƒÉng nh·ªØng b√†i nh∆∞ th·∫ø n√†y. C√°i x·∫•u xa, m√¨nh ph·∫£i qu√™n n√≥ ƒëi, cho n√≥ m·∫•t d·∫ßn. K n√™n nh·∫Øc l·∫°i. Ng t·ªët s·∫Ω b·ªã √°m ·∫£nh, k t·ªët cho tinh th·∫ßn, ng x·∫•u s·∫Ω ghi nh·∫≠n. Ng k hi·ªÉu bi·∫øt s·∫Ω ghi nh·ªõ. V√† n·∫øu nh√≥m c√≤n ƒëƒÉng nhi·ªÅu b√†i nh∆∞ t‚Ä¶ th·∫ø n√†y th√¨ m√¨nh s·∫Ω r·ªùi nh√≥m. Cu·ªôc s·ªëng r·∫•t ng·∫Øn ng·ªßi, t·∫°i sao ph·∫£i ƒë·ªÉ t√¢m ƒë·∫øn ƒëi·ªÅu c·∫ßn qu√™n ƒëi. H√£y s·ªëng t√≠ch c·ª±c v√† t∆∞∆°i s√°ng.'
    ]
    response = random.choice(peabot_rep)
    await interaction.response.send_message(response)


    
######
@tree.command(name="wikipedia", description = "T√¨m ki·∫øm th√¥ng tin tr√™n Wikipedia")
async def wiki(interaction: discord.Interaction, ngon_ngu: str, noi_dung: str):
    if ngon_ngu == 'Ti·∫øng Vi·ªát':
        ngon_ngu = 'vi'
    if ngon_ngu == 'Ti·∫øng Anh':
        ngon_ngu = 'en'
    wikipedia.set_lang(f'{ngon_ngu}')
    try:
        # m√†u xanh
        r_color = 124
        g_color = 252
        b_color = 0
        result = wikipedia.summary(f"{noi_dung}")
    except:
        # m√†u ƒë·ªè
        r_color = 255
        g_color = 0
        b_color = 0
        result = "L·ªói khi nh·∫≠p t·ª´ kh√≥a! Vui l√≤ng nh·∫≠p ch√≠nh x√°c t·ª´ kh√≥a b·∫°n c·∫ßn t√¨m"

    wikiembed = discord.Embed(
        title = f'K·∫øt qu·∫£ t√¨m ki·∫øm "{noi_dung}" tr√™n Wikipedia:', 
        description = result, 
        color = discord.Color.from_rgb(r_color, g_color, b_color)
        ) 
    wikiembed.set_footer (text = f'L·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi: {interaction.user}  ‚Ä¢  N·ªôi dung ƒë∆∞·ª£c tr√≠ch t·ª´ wikipedia.org')
    try:
        await interaction.response.send_message(embed = wikiembed, ephemeral = False)    
    except:
        await interaction.response.send_message("H√¨nh nh∆∞ c√≥ l·ªói g√¨ ƒë√≥ r·ªìi!", ephemeral = False)   


@wiki.autocomplete('ngon_ngu')
async def wiki_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    ngon_ngu = ['Ti·∫øng Vi·ªát','Ti·∫øng Anh']
    return [
        app_commands.Choice(name=wiki1, value=wiki1)
        for wiki1 in ngon_ngu if current.lower() in wiki1.lower()
        ]



#####

@tree.command(name = 'th·ªùi-ti·∫øt', description = 'Xem t√¨nh h√¨nh th·ªùi ti·∫øt ·ªü b·∫•t k√¨ th√†nh ph·ªë n√†o tr√™n th·∫ø gi·ªõi')
async def weather(interaction: discord.Interaction, city_name: str):
    try:
        locate = Weather(city_name)
        wind_speed = locate.wind_speed
        temp = round(locate.temp, 1)
        max_temp = round(locate.temp_max, 1)
        min_temp = round(locate.temp_min, 1)
        humidity = locate.humidity
        uv_point = locate.uv

        if uv_point <= 2:
            warn = 'An To√†n'
            tips = 'B·∫°n n√™n s·ª≠ d·ª•ng k√≠nh r√¢m v√† kem ch·ªëng n·∫Øng khi ra ngo√†i tr·ªùi!'
            embed_color = discord.Color.green()
        if uv_point > 2 and uv_point <= 5:
            warn = 'Kh√° Nguy Hi·ªÉm'
            tips = 'B·∫°n n√™n s·ª≠ d·ª•ng k√≠nh r√¢m d√πng kem ch·ªëng n·∫Øng v√† che ch·∫Øn l√†n da c·∫©n th·∫≠n khi ·ªü ngo√†i tr·ªùi n·∫Øng!'
            embed_color = discord.Color.yellow()
        if uv_point > 5 and uv_point <= 7:
            warn = 'Nguy Hi·ªÉm!'
            tips = '·∫¢nh h∆∞·ªüng m·∫°nh ƒë·∫øn l√†n da, h√£y d√πng kem ch·ªëng n·∫Øng c√≥ SPF 15 ho·∫∑c cao h∆°n v√† che ch·∫Øn l√†n da c·∫©n th·∫≠n khi ·ªü ngo√†i tr·ªùi n·∫Øng!'
            embed_color = discord.Color.orange()
        if uv_point > 7:
            warn = 'C·ª±c K√¨ Nguy Hi·ªÉm!!!'
            tips = '·∫¢nh h∆∞·ªüng r·∫•t m·∫°nh l√™n l√†n da n·∫øu kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá, ti·∫øp x√∫c l√¢u c√≥ th·ªÉ g√¢y ung th∆∞ v√† c√°c b·ªánh kh√°c v·ªÅ da. H·∫°n ch·∫ø ra ngo√†i n·∫øu khu v·ª±c c·ªßa b·∫°n c√≥ m·ª©c UV n√†y!'
            embed_color = discord.Color.red() 

        weatherEmbed = discord.Embed(title = f"Th·ªùi ti·∫øt t·∫°i {locate.city} - {locate.country} hi·ªán t·∫°i!", color = embed_color)
        weatherEmbed.add_field(name = 'Nhi·ªát ƒë·ªô:', value = f'{temp} ¬∞C', inline = False)
        weatherEmbed.add_field(name = 'Nhi·ªát ƒë·ªô cao nh·∫•t:', value = f'{max_temp} ¬∞C', inline = True)
        weatherEmbed.add_field(name = 'Nhi·ªát ƒë·ªô th·∫•p nh·∫•t:', value = f'{min_temp}¬∞C', inline = True)
        weatherEmbed.add_field(name = 'T·ªëc ƒë·ªô gi√≥:', value = f"{wind_speed} m/s" , inline = False)
        weatherEmbed.add_field(name = 'ƒê·ªô ·∫©m:', value = f'{humidity}%', inline = False)
        weatherEmbed.add_field(name = 'Ch·ªâ s·ªë UV:', value = f'{uv_point} - {warn}', inline = False)
        weatherEmbed.add_field(name = 'L·ªùi Khuy√™n:', value = f'{tips}', inline = False)
        weatherEmbed.set_thumbnail(url='https://cdn.discordapp.com/attachments/946341795950895104/1025413604712919130/unknown.png')
        weatherEmbed.set_footer(text = f'D·ª± b√°o th·ªùi ti·∫øt ‚Ä¢ B·ªüi {interaction.user}')
        await interaction.response.send_message(embed = weatherEmbed)
    except:
        await interaction.response.send_message("Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë b·∫°n y√™u c·∫ßu", ephemeral = True)
       

#####
@tree.command(name = 'avatar', description = 'Xem avatar c·ªßa m√¨nh ho·∫∑c c·ªßa ng∆∞·ªùi kh√°c')
async def avatar(interaction: discord.Interaction, user: discord.Member):
    avatarEmbed = discord.Embed(title = f'Avatar c·ªßa {user}:', color = discord.Color.gold())
    avatarEmbed.set_image(url = user.avatar)
    avatarEmbed.set_footer(text = f'L·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi {interaction.user}')
    await interaction.response.send_message(embed = avatarEmbed)


#######
@tree.command(name = 'chat-with-another-language', description = 'T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi tin nh·∫Øn c·ªßa b·∫°n sang ng√¥n ng·ªØ kh√°c m√† b·∫°n mu·ªën')
async def cwal(interaction: discord.Interaction, language : str, text : str):

    if language == "Ti·∫øng Vi·ªát":
        lang_code = 'vi'
    if language == "Ti·∫øng Anh":
        lang_code = 'en'
    if language == "Ti·∫øng Nh·∫≠t":
        lang_code = 'ja'
    if language == "Ti·∫øng Trung (Ph·ªìn Th·ªÉ)":
        lang_code = 'zh-TW'
    if language == "Ti·∫øng Trung (Gi·∫£n Th·ªÉ)":
        lang_code = 'zh-CN'
    if language == "Ti·∫øng Indo":
        lang_code = 'id'
    if language == "Ti·∫øng H√†n":
        lang_code = 'ko'
    if language == "Ti·∫øng Th√°i":
        lang_code = 'th'
    if language == "Ti·∫øng ƒê·ª©c":
        lang_code = 'de'
    if language == "Ti·∫øng Ph√°p":
        lang_code = 'fr'
    if language == "Ti·∫øng Nga":
        lang_code = 'ru'
    if language == "Ti·∫øng T√¢y Ban Nha":
        lang_code = 'es'
    if language == "Ti·∫øng √ù":
        lang_code = 'it'


    trans_text = GoogleTranslator(source='auto', target=f'{lang_code}').translate(text=text)

    username = interaction.user.nick or interaction.user.name #∆∞u ti√™n hi·ªÉn th·ªã nickname trong server, n·∫øu ko c√≥ nick name th√¨ hi·ªán t√™n

    cwalEmbed = discord.Embed(color = discord.Color.random())
    cwalEmbed.set_author(name = f'{username}:', icon_url = f'{interaction.user.avatar}')
    cwalEmbed.add_field(name = f'{trans_text}', value = '\u200B', inline = False) #\u200B l√† k√≠ t·ª± tr·ªëng
    await interaction.response.send_message(embed = cwalEmbed)


@cwal.autocomplete('language')
async def cwal_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> List[app_commands.Choice[str]]:
    language = ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh', 'Ti·∫øng Nh·∫≠t', 'Ti·∫øng Trung (Ph·ªìn Th·ªÉ)','Ti·∫øng Trung (Gi·∫£n Th·ªÉ)', 'Ti·∫øng Indo', 'Ti·∫øng H√†n', 'Ti·∫øng Th√°i', 'Ti·∫øng ƒê·ª©c', 'Ti·∫øng Ph√°p', 'Ti·∫øng Nga', 'Ti·∫øng T√¢y Ban Nha', 'Ti·∫øng √ù']
    return [
        app_commands.Choice(name=lang123, value=lang123)
        for lang123 in language if current.lower() in lang123.lower()
        ]



####




#### test 
@tree.command(name="traloi", description = "S·ª≠ d·ª•ng Rep")
async def self(interaction: discord.Interaction, ch: str):

    await interaction.response.send_message("this text will be edited after 4 scds")
    await asyncio.sleep(1)
    
    await interaction.edit_original_response(content="this text will be edited after 3 scds")
    await asyncio.sleep(1)
    
    await interaction.edit_original_response(content="this text will be edited after 2 scds")
    await asyncio.sleep(1)
    
    await interaction.edit_original_response(content="this text will be edited after 1 scds")
    await asyncio.sleep(1)
    #await interaction.response.defer(ephemeral = False)

    #await interaction.followup.send("n·ªëi")
    await interaction.edit_original_response(content=f'edited')
    await asyncio.sleep(2)
    await interaction.delete_original_response()
    



###########
@tree.command(name="join", description = "G·ªçi bot v√†o ph√≤ng voice")
async def join(interaction: discord.Interaction):
    if interaction.user.voice is None:
        await interaction.response.send_message("‚ùå B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return

    voice_channel = interaction.user.voice.channel
    voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

    if voice_client and voice_client.is_connected():
        await interaction.response.send_message(f"‚úÖ Bot ƒë√£ c√≥ m·∫∑t trong {voice_client.channel.mention}!", ephemeral=True)
    else:
        await voice_channel.connect()
        await interaction.response.send_message(f"‚úÖ ƒê√£ tham gia **{voice_channel.mention}**!", ephemeral=False)




#########
@tree.command(name="leave", description="Y√™u c·∫ßu bot r·ªùi kh·ªèi voice chat")
async def leave(interaction: discord.Interaction):
    voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

    if voice_client is not None:  # Ki·ªÉm tra xem bot c√≥ ƒëang ·ªü trong voice channel kh√¥ng
        await voice_client.disconnect()
        await interaction.response.send_message("üëã Bot ƒë√£ r·ªùi kh·ªèi voice chat!")
    else:
        await interaction.response.send_message("‚ùå Bot kh√¥ng ·ªü trong voice chat n√†o c·∫£!")




##
@tree.command(name="speak", description="D√πng ƒë·ªÉ n√≥i trong voicechat khi b·∫°n kh√¥ng c√≥ mic")
async def self(interaction: discord.Interaction, van_ban: str):
    username = interaction.user.nick or interaction.user.name  # L·∫•y nickname, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y username

    # T·∫°o file √¢m thanh
    sound = gTTS(text=van_ban, lang='vi', slow=False)
    sound.save("tts.mp3")

    if interaction.user.voice is not None:  # Ki·ªÉm tra user c√≥ ƒëang ·ªü voice channel kh√¥ng
        voice_channel = interaction.user.voice.channel
        voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

        if voice_client is None:  # N·∫øu bot ch∆∞a v√†o ph√≤ng, k·∫øt n·ªëi v√†o
            voice_client = await voice_channel.connect()
        elif voice_client.channel != voice_channel:  # N·∫øu bot ƒëang ·ªü k√™nh kh√°c, di chuy·ªÉn sang
            await voice_client.move_to(voice_channel)

        source = await discord.FFmpegOpusAudio.from_probe(
            "tts.mp3", method='fallback', executable="D:/Data/Data/Peanutss Bot Project/peabot-new-features-test/ffmpeg/bin/ffmpeg.exe"
        )

        await interaction.response.send_message(f"**{username} mu·ªën n√≥i r·∫±ng:** {van_ban}")
        
        if not voice_client.is_playing():  # Ki·ªÉm tra n·∫øu bot ch∆∞a ph√°t √¢m thanh th√¨ ph√°t
            voice_client.play(source)
        else:
            await interaction.followup.send("Bot ƒëang ph√°t √¢m thanh, vui l√≤ng ch·ªù.")


################## kh·ªëi l·ªánh √¢m nh·∫°c ######################

 # Dictionary ƒë·ªÉ l∆∞u danh s√°ch b√†i h√°t theo guild ID
queue = {} 

@tree.command(name="play", description="Ph√°t nh·∫°c t·ª´ YouTube b·∫±ng t·ª´ kh√≥a ho·∫∑c link")
async def play(interaction: discord.Interaction, query: str):
    await interaction.response.defer()  # Tr√°nh timeout khi t√¨m ki·∫øm YouTube

    guild_id = interaction.guild.id
    voice_channel = interaction.user.voice.channel if interaction.user.voice else None
    
    if not voice_channel:
        await interaction.followup.send("‚ùå B·∫°n ph·∫£i tham gia voice channel tr∆∞·ªõc!")
        return
    
    voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

    if not voice_client:
        voice_client = await voice_channel.connect()
    elif voice_client.channel != voice_channel:
        await voice_client.move_to(voice_channel)

    # X√°c ƒë·ªãnh query l√† link hay t·ª´ kh√≥a
    ydl_opts = {"format": "bestaudio", "noplaylist": True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            if "youtube.com" in query or "youtu.be" in query:
                info = ydl.extract_info(query, download=False)  # N·∫øu l√† link, t·∫£i th√¥ng tin tr·ª±c ti·∫øp
            else:
                info = ydl.extract_info(f"ytsearch:{query}", download=False)["entries"][0]  # N·∫øu l√† t·ª´ kh√≥a, t√¨m ki·∫øm video
            url = info["url"]
            title = info["title"]
        except Exception as e:
            await interaction.followup.send(f"‚ùå Kh√¥ng t√¨m th·∫•y video n√†o cho: {query}")
            return
    
    # Th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i
    if guild_id not in queue:
        queue[guild_id] = []
    queue[guild_id].append((url, title))

    await interaction.followup.send(f"üéµ **ƒê√£ th√™m v√†o h√†ng ƒë·ª£i:** {title}")

    # N·∫øu bot ch∆∞a ph√°t nh·∫°c, b·∫Øt ƒë·∫ßu ph√°t
    if not voice_client.is_playing():
        await play_next_song(voice_client, guild_id, interaction)

async def play_next_song(voice_client, guild_id, interaction):
    if guild_id in queue and queue[guild_id]:
        url, title = queue[guild_id].pop(0)

        ffmpeg_options = {
            "before_options": "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
            "options": "-vn",
            "executable": "D:/Data/Data/Peanutss Bot Project/peabot-new-features-test/ffmpeg/bin/ffmpeg.exe"
        }
        
        source = discord.FFmpegOpusAudio(url, **ffmpeg_options)

        def after_play(error):
            if error:
                print(f"L·ªói ph√°t nh·∫°c: {error}")
            asyncio.run_coroutine_threadsafe(play_next_song(voice_client, guild_id, interaction), interaction.client.loop)

        voice_client.play(source, after=after_play)

        await interaction.followup.send(f"üé∂ **ƒêang ph√°t:** {title}")
    else:
        await interaction.followup.send("‚úÖ H√†ng ƒë·ª£i ƒë√£ ph√°t h·∫øt, bot s·∫Ω r·ªùi voice chat.")
        await voice_client.disconnect()

@tree.command(name="skip", description="B·ªè qua b√†i h√°t ƒëang ph√°t hi·ªán t·∫°i")
async def skip(interaction: discord.Interaction):
    voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

    if voice_client and voice_client.is_playing():
        voice_client.stop()  # D·ª´ng b√†i hi·ªán t·∫°i, s·∫Ω t·ª± ph√°t b√†i ti·∫øp theo
        await interaction.response.send_message("‚è≠ **ƒê√£ b·ªè qua b√†i h√°t!**")
    else:
        await interaction.response.send_message("‚ùå Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.")

@tree.command(name="pause", description="T·∫°m d·ª´ng b√†i h√°t ƒëang ph√°t/")
async def pause(interaction: discord.Interaction):
    voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

    if voice_client and voice_client.is_playing():
        voice_client.pause()
        await interaction.response.send_message("‚è∏ **ƒê√£ t·∫°m d·ª´ng nh·∫°c!**")
    else:
        await interaction.response.send_message("‚ùå Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.")

@tree.command(name="resume", description="Ti·∫øp t·ª•c ph√°t nh·∫°c")
async def resume(interaction: discord.Interaction):
    voice_client = discord.utils.get(interaction.client.voice_clients, guild=interaction.guild)

    if voice_client and voice_client.is_paused():
        voice_client.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è **Ti·∫øp t·ª•c ph√°t nh·∫°c!**")
    else:
        await interaction.response.send_message("‚ùå Nh·∫°c ch∆∞a b·ªã t·∫°m d·ª´ng ho·∫∑c kh√¥ng c√≥ b√†i n√†o ƒë·ªÉ ti·∫øp t·ª•c.")

@tree.command(name="queue", description="Xem danh s√°ch b√†i h√°t trong h√†ng ch·ªù")
async def show_queue(interaction: discord.Interaction):
    guild_id = interaction.guild.id

    if guild_id in queue and queue[guild_id]:
        queue_list = "\n".join([f"{i+1}. {title}" for i, (_, title) in enumerate(queue[guild_id])])
        await interaction.response.send_message(f"üé∂ **Danh s√°ch b√†i h√°t trong h√†ng ch·ªù:**\n{queue_list}")
    else:
        await interaction.response.send_message("‚ùå H√†ng ƒë·ª£i tr·ªëng.")



##########
class RPSGame(View):
    def __init__(self, user: discord.User):
        super().__init__(timeout=10)  # Set th·ªùi gian ch·ªù 10 gi√¢y
        self.user = user
        self.choices = ["‚úä", "‚úã", "‚úåÔ∏è"]

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i c·ªßa game n√†y!", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="‚úåÔ∏è K√©o", style=discord.ButtonStyle.primary)
    async def rock(self, interaction: discord.Interaction, button: Button):
        await self.process_game(interaction, "‚úåÔ∏è")

    @discord.ui.button(label="‚úã Bao", style=discord.ButtonStyle.success)
    async def paper(self, interaction: discord.Interaction, button: Button):
        await self.process_game(interaction, "‚úã")

    @discord.ui.button(label="‚úä B√∫a", style=discord.ButtonStyle.danger)
    async def scissors(self, interaction: discord.Interaction, button: Button):
        await self.process_game(interaction, "‚úä")

    async def process_game(self, interaction: discord.Interaction, player_choice: str):
        bot_choice = random.choice(self.choices)
        result = self.determine_winner(player_choice, bot_choice)

        await interaction.response.edit_message(
            content=f"üÜö B·∫°n ch·ªçn: {player_choice} | Bot ch·ªçn: {bot_choice}\n{result}",
            view=None
        )

    def determine_winner(self, player: str, bot: str) -> str:
        if player == bot:
            return "‚öñÔ∏è **H√≤a r·ªìi!**"
        elif (player == "‚úä" and bot == "‚úåÔ∏è") or (player == "‚úã" and bot == "‚úä") or (player == "‚úåÔ∏è" and bot == "‚úã"):
            return "üéâ **B·∫°n th·∫Øng!**"
        else:
            return "ü§ñ **Bot th·∫Øng!**"

@tree.command(name="k√©o-b√∫a-bao", description="Ch∆°i game K√©o B√∫a Bao v·ªõi bot")
async def rps(interaction: discord.Interaction):
    await interaction.response.send_message("üéÆ Ch·ªçn k√©o, b√∫a ho·∫∑c bao!", view=RPSGame(interaction.user))




#B·ªô b√†i X√¨ L√°c
CARD_VALUES = {
    "A": [1, 11], "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10,
    "J": 10, "Q": 10, "K": 10
}
CARD_SUITS = ["‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"]

def draw_card():
    """ R√∫t m·ªôt l√° b√†i ng·∫´u nhi√™n """
    rank = random.choice(list(CARD_VALUES.keys()))
    suit = random.choice(CARD_SUITS)
    return f"{rank}{suit}", CARD_VALUES[rank]

def calculate_hand(hand):
    total = 0
    aces = 0
    for card, value in hand:
        if card.startswith("A"):
            aces += 1
            total += 11  # M·∫∑c ƒë·ªãnh √Åt l√† 11
        else:
            total += value

    # N·∫øu t·ªïng ƒëi·ªÉm v∆∞·ª£t qu√° 21, ƒë·ªïi √Åt t·ª´ 11 th√†nh 1
    while total > 21 and aces:
        total -= 10
        aces -= 1

    return total

class XiDachGame(View):
    def __init__(self, user: discord.User):
        super().__init__(timeout=30)  # Gi·ªõi h·∫°n th·ªùi gian 30s
        self.user = user
        self.player_hand = [draw_card(), draw_card()]
        self.bot_hand = [draw_card(), draw_card()]

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i c·ªßa game n√†y!", ephemeral=True)
            return False
        return True

    def get_hand_display(self, hand):
        """ Hi·ªÉn th·ªã b√†i v·ªõi emoji l√° b√†i """
        return " | ".join([card for card, _ in hand])

    @discord.ui.button(label="üéØ R√∫t b√†i", style=discord.ButtonStyle.primary)
    async def hit(self, interaction: discord.Interaction, button: Button):
        self.player_hand.append(draw_card())
        player_total = calculate_hand(self.player_hand)

        if player_total > 21:
            await interaction.response.edit_message(
                content=f"üí• **B·∫°n ƒë√£ r√∫t b√†i v√† b·ªã qu·∫Øc (qu√° 21 ƒëi·ªÉm)!**\n\n"
                        f"üÉè **B√†i c·ªßa b·∫°n:** {self.get_hand_display(self.player_hand)} (**{player_total} ƒëi·ªÉm**)\n"
                        f"ü§ñ **B√†i c·ªßa nh√† c√°i:** {self.bot_hand[0][0]} | ‚ùì\n"
                        f"‚ùå **B·∫°n thua r·ªìi!**",
                view=None
            )
        else:
            await interaction.response.edit_message(
                content=f"üéØ **B·∫°n ƒë√£ r√∫t b√†i!**\n\n"
                        f"üÉè **B√†i c·ªßa b·∫°n:** {self.get_hand_display(self.player_hand)} (**{player_total} ƒëi·ªÉm**)\n"
                        f"ü§ñ **B√†i c·ªßa nh√† c√°i:** {self.bot_hand[0][0]} | ‚ùì\n"
                        f"üìå **B·∫•m 'D·ª´ng' n·∫øu b·∫°n mu·ªën gi·ªØ b√†i!**",
                view=self
            )

    @discord.ui.button(label="üõë D·ª´ng", style=discord.ButtonStyle.success)
    async def stand(self, interaction: discord.Interaction, button: Button):
        player_total = calculate_hand(self.player_hand)
        bot_total = calculate_hand(self.bot_hand)

        # Bot b·ªëc b√†i n·∫øu c√≥ d∆∞·ªõi 16 ƒëi·ªÉm 
        while bot_total < 16:
            self.bot_hand.append(draw_card())
            bot_total = calculate_hand(self.bot_hand)

        # X√°c ƒë·ªãnh k·∫øt qu·∫£
        if bot_total > 21 or player_total > bot_total:
            result = "üéâ **B·∫°n th·∫Øng!**"
        elif player_total == bot_total:
            result = "‚öñÔ∏è **H√≤a nhau!**"
        else:
            result = "ü§ñ **Nh√† c√°i th·∫Øng!**"

        await interaction.response.edit_message(
            content=f"üÉè **B√†i c·ªßa b·∫°n:** {self.get_hand_display(self.player_hand)} (**{player_total} ƒëi·ªÉm**)\n"
                    f"ü§ñ **B√†i c·ªßa nh√† c√°i:** {self.get_hand_display(self.bot_hand)} (**{bot_total} ƒëi·ªÉm**)\n"
                    f"{result}",
            view=None
        )

@tree.command(name="x√¨-d√°ch", description="Ch∆°i b√†i X√¨ D√°ch v·ªõi bot!")
async def xidach(interaction: discord.Interaction):
    game = XiDachGame(interaction.user)
    await interaction.response.send_message(
        f"üÉè **B·∫Øt ƒë·∫ßu game X√¨ D√°ch!**\n\n"
        f"**B√†i c·ªßa b·∫°n:** {game.get_hand_display(game.player_hand)}\n\n"
        f"**B√†i c·ªßa nh√† c√°i:** {game.bot_hand[0][0]} | ‚ùì\n\n"
        f"üéØ **B·∫•m 'R√∫t b√†i' ƒë·ªÉ b·ªëc th√™m ho·∫∑c 'D·ª´ng' ƒë·ªÉ gi·ªØ b√†i!**",
        view=game
    )



##################### Kh·ªëi l·ªánh qu·∫£n l√Ω server
@tree.command(name="clear", description="X√≥a tin nh·∫Øn theo s·ªë l∆∞·ª£ng (t·ªëi ƒëa 100).")
@app_commands.checks.has_permissions(manage_messages=True)
async def clear(interaction: discord.Interaction, so_luong: int):
    if so_luong <= 0 or so_luong > 100:
        await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i t·ª´ **1 ƒë·∫øn 100**!", ephemeral=True)
        return

    await interaction.channel.purge(limit=so_luong)
    await interaction.response.send_message(f"‚úÖ ƒê√£ x√≥a **{so_luong}** tin nh·∫Øn!", ephemeral=True)


@tree.command(name="kick", description="Kick th√†nh vi√™n ra kh·ªèi server.")
@app_commands.checks.has_permissions(kick_members=True)
async def kick(interaction: discord.Interaction, member: discord.Member, ly_do: str = "Kh√¥ng c√≥ l√Ω do"):
    if interaction.user.top_role <= member.top_role:
        await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ kick ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang b·∫±ng b·∫°n!", ephemeral=True)
        return
    if not interaction.guild.me.guild_permissions.kick_members:
        await interaction.response.send_message("‚ùå Bot kh√¥ng c√≥ quy·ªÅn `Kick Members`!", ephemeral=True)
        return

    await member.kick(reason=ly_do)
    await interaction.response.send_message(f"‚úÖ **{member.mention} ƒë√£ b·ªã kick!** üõë\n**L√Ω do:** {ly_do}")


@tree.command(name="ban", description="C·∫•m th√†nh vi√™n kh·ªèi server.")
@app_commands.checks.has_permissions(ban_members=True)
async def ban(interaction: discord.Interaction, member: discord.Member, ly_do: str = "Kh√¥ng c√≥ l√Ω do"):
    if interaction.user.top_role <= member.top_role:
        await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ ban ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang b·∫±ng b·∫°n!", ephemeral=True)
        return
    if not interaction.guild.me.guild_permissions.ban_members:
        await interaction.response.send_message("‚ùå Bot kh√¥ng c√≥ quy·ªÅn `Ban Members`!", ephemeral=True)
        return

    await member.ban(reason=ly_do)
    await interaction.response.send_message(f"üö´ **{member.mention} ƒë√£ b·ªã ban!** üî®\n**L√Ω do:** {ly_do}")


client.run(TOKEN) 
